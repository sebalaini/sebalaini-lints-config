name: Pull Request

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions: write-all

jobs:
  test-semantic-release:
    name: Release dry-run
    runs-on: ubuntu-latest
    steps:
      - name: 📀 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🖥️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: 🔗 Install dependencies
        run: yarn install --frozen-lockfile

      # - name: Dry run
      #   run: git checkout -b ${{ github.head_ref }}

      # - name: Dry run
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: unset GITHUB_ACTIONS && npx semantic-release-github-pr --branches ${{ steps.branch-name.outputs.ref_branch }}

      - name: 🔬 Check semantic versioning
        id: semantic-release
        run: |
            GITHUB_REF=${{ github.head_ref }}
            npx semantic-release --no-ci --dry-run --branches ${{ github.head_ref }} > output.txt
            OUTPUT=$(cat output.txt | base64 -w 0)
            echo "::set-output name=releaseNote::$OUTPUT"

      - name: 📝 Report semantic versioning
        uses: actions/github-script@v3
        if: ${{ steps.semantic-release.outputs.releaseNote != '' }}
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // build release note
              const semanticReleaseOutput = Buffer.from('${{ steps.semantic-release.outputs.releaseNote }}', 'base64').toString('utf8');
              const semanticReleaseLogMatch = /^[[0-9:\sAMPM]+\]\s\[semantic-release\].*$/;
              const lines = semanticReleaseOutput.split('\n');
              const lastSemanticReleaseLogIndex = [...lines]
                  .reverse()
                  .findIndex((line) => line.match(semanticReleaseLogMatch));

              const releaseNoteIndex = lines.length - lastSemanticReleaseLogIndex;
              const releaseNote = lines.slice(releaseNoteIndex);

              let res = releaseNote.join('\n');
              if (!releaseNote.length || !res) {
                  res = '### No release note would be generated.';
              }

              const SEMANTIC_RELEASE_BODY_HEADER = '## 📝 Semantic Release Report';
              const body = [SEMANTIC_RELEASE_BODY_HEADER, res].join('\n');

              // get last comment
              const comments = await github.issues.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo
              });

              // find comments to delete
              const commentsToDelete = comments.data.filter((comment) =>
                  comment.body.startsWith(SEMANTIC_RELEASE_BODY_HEADER)
              );

              // delete comments
              const prms = commentsToDelete.map((comment) =>
                  github.issues.deleteComment({
                      comment_id: comment.id,
                      owner: context.repo.owner,
                      repo: context.repo.repo
                  })
              );

              await Promise.all(prms);

              // create new comment for release note
              github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body
              });
